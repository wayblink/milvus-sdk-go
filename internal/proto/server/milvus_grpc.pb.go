// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.9.0
// source: milvus.proto

package server

import (
	context "context"
	common "github.com/milvus-io/milvus-sdk-go/v2/internal/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MilvusServiceClient is the client API for MilvusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MilvusServiceClient interface {
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*common.Status, error)
	DropCollection(ctx context.Context, in *DropCollectionRequest, opts ...grpc.CallOption) (*common.Status, error)
	HasCollection(ctx context.Context, in *HasCollectionRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	LoadCollection(ctx context.Context, in *LoadCollectionRequest, opts ...grpc.CallOption) (*common.Status, error)
	ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*common.Status, error)
	DescribeCollection(ctx context.Context, in *DescribeCollectionRequest, opts ...grpc.CallOption) (*DescribeCollectionResponse, error)
	GetCollectionStatistics(ctx context.Context, in *GetCollectionStatisticsRequest, opts ...grpc.CallOption) (*GetCollectionStatisticsResponse, error)
	ShowCollections(ctx context.Context, in *ShowCollectionsRequest, opts ...grpc.CallOption) (*ShowCollectionsResponse, error)
	CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*common.Status, error)
	DropPartition(ctx context.Context, in *DropPartitionRequest, opts ...grpc.CallOption) (*common.Status, error)
	HasPartition(ctx context.Context, in *HasPartitionRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	LoadPartitions(ctx context.Context, in *LoadPartitionsRequest, opts ...grpc.CallOption) (*common.Status, error)
	ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*common.Status, error)
	GetPartitionStatistics(ctx context.Context, in *GetPartitionStatisticsRequest, opts ...grpc.CallOption) (*GetPartitionStatisticsResponse, error)
	ShowPartitions(ctx context.Context, in *ShowPartitionsRequest, opts ...grpc.CallOption) (*ShowPartitionsResponse, error)
	CreateAlias(ctx context.Context, in *CreateAliasRequest, opts ...grpc.CallOption) (*common.Status, error)
	DropAlias(ctx context.Context, in *DropAliasRequest, opts ...grpc.CallOption) (*common.Status, error)
	AlterAlias(ctx context.Context, in *AlterAliasRequest, opts ...grpc.CallOption) (*common.Status, error)
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*common.Status, error)
	DescribeIndex(ctx context.Context, in *DescribeIndexRequest, opts ...grpc.CallOption) (*DescribeIndexResponse, error)
	GetIndexState(ctx context.Context, in *GetIndexStateRequest, opts ...grpc.CallOption) (*GetIndexStateResponse, error)
	GetIndexBuildProgress(ctx context.Context, in *GetIndexBuildProgressRequest, opts ...grpc.CallOption) (*GetIndexBuildProgressResponse, error)
	DropIndex(ctx context.Context, in *DropIndexRequest, opts ...grpc.CallOption) (*common.Status, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*MutationResult, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*MutationResult, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResults, error)
	Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResults, error)
	CalcDistance(ctx context.Context, in *CalcDistanceRequest, opts ...grpc.CallOption) (*CalcDistanceResults, error)
	GetFlushState(ctx context.Context, in *GetFlushStateRequest, opts ...grpc.CallOption) (*GetFlushStateResponse, error)
	GetPersistentSegmentInfo(ctx context.Context, in *GetPersistentSegmentInfoRequest, opts ...grpc.CallOption) (*GetPersistentSegmentInfoResponse, error)
	GetQuerySegmentInfo(ctx context.Context, in *GetQuerySegmentInfoRequest, opts ...grpc.CallOption) (*GetQuerySegmentInfoResponse, error)
	GetReplicas(ctx context.Context, in *GetReplicasRequest, opts ...grpc.CallOption) (*GetReplicasResponse, error)
	Dummy(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	// TODO: remove
	RegisterLink(ctx context.Context, in *RegisterLinkRequest, opts ...grpc.CallOption) (*RegisterLinkResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	LoadBalance(ctx context.Context, in *LoadBalanceRequest, opts ...grpc.CallOption) (*common.Status, error)
	GetCompactionState(ctx context.Context, in *GetCompactionStateRequest, opts ...grpc.CallOption) (*GetCompactionStateResponse, error)
	ManualCompaction(ctx context.Context, in *ManualCompactionRequest, opts ...grpc.CallOption) (*ManualCompactionResponse, error)
	GetCompactionStateWithPlans(ctx context.Context, in *GetCompactionPlansRequest, opts ...grpc.CallOption) (*GetCompactionPlansResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
	Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error)
	GetImportState(ctx context.Context, in *GetImportStateRequest, opts ...grpc.CallOption) (*GetImportStateResponse, error)
	ListImportTasks(ctx context.Context, in *ListImportTasksRequest, opts ...grpc.CallOption) (*ListImportTasksResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
	CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*common.Status, error)
	UpdateCredential(ctx context.Context, in *UpdateCredentialRequest, opts ...grpc.CallOption) (*common.Status, error)
	DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*common.Status, error)
	ListCredUsers(ctx context.Context, in *ListCredUsersRequest, opts ...grpc.CallOption) (*ListCredUsersResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*common.Status, error)
	DropRole(ctx context.Context, in *DropRoleRequest, opts ...grpc.CallOption) (*common.Status, error)
	OperateUserRole(ctx context.Context, in *OperateUserRoleRequest, opts ...grpc.CallOption) (*common.Status, error)
	SelectRole(ctx context.Context, in *SelectRoleRequest, opts ...grpc.CallOption) (*SelectRoleResponse, error)
	SelectUser(ctx context.Context, in *SelectUserRequest, opts ...grpc.CallOption) (*SelectUserResponse, error)
	SelectResource(ctx context.Context, in *SelectResourceRequest, opts ...grpc.CallOption) (*SelectResourceResponse, error)
	OperatePrivilege(ctx context.Context, in *OperatePrivilegeRequest, opts ...grpc.CallOption) (*common.Status, error)
	SelectGrant(ctx context.Context, in *SelectGrantRequest, opts ...grpc.CallOption) (*SelectGrantResponse, error)
}

type milvusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMilvusServiceClient(cc grpc.ClientConnInterface) MilvusServiceClient {
	return &milvusServiceClient{cc}
}

func (c *milvusServiceClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropCollection(ctx context.Context, in *DropCollectionRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/DropCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasCollection(ctx context.Context, in *HasCollectionRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/HasCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) LoadCollection(ctx context.Context, in *LoadCollectionRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/LoadCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/ReleaseCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeCollection(ctx context.Context, in *DescribeCollectionRequest, opts ...grpc.CallOption) (*DescribeCollectionResponse, error) {
	out := new(DescribeCollectionResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/DescribeCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetCollectionStatistics(ctx context.Context, in *GetCollectionStatisticsRequest, opts ...grpc.CallOption) (*GetCollectionStatisticsResponse, error) {
	out := new(GetCollectionStatisticsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/GetCollectionStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowCollections(ctx context.Context, in *ShowCollectionsRequest, opts ...grpc.CallOption) (*ShowCollectionsResponse, error) {
	out := new(ShowCollectionsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/ShowCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/CreatePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropPartition(ctx context.Context, in *DropPartitionRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/DropPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasPartition(ctx context.Context, in *HasPartitionRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/HasPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) LoadPartitions(ctx context.Context, in *LoadPartitionsRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/LoadPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/ReleasePartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetPartitionStatistics(ctx context.Context, in *GetPartitionStatisticsRequest, opts ...grpc.CallOption) (*GetPartitionStatisticsResponse, error) {
	out := new(GetPartitionStatisticsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/GetPartitionStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowPartitions(ctx context.Context, in *ShowPartitionsRequest, opts ...grpc.CallOption) (*ShowPartitionsResponse, error) {
	out := new(ShowPartitionsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/ShowPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateAlias(ctx context.Context, in *CreateAliasRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/CreateAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropAlias(ctx context.Context, in *DropAliasRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/DropAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) AlterAlias(ctx context.Context, in *AlterAliasRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/AlterAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/CreateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeIndex(ctx context.Context, in *DescribeIndexRequest, opts ...grpc.CallOption) (*DescribeIndexResponse, error) {
	out := new(DescribeIndexResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/DescribeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetIndexState(ctx context.Context, in *GetIndexStateRequest, opts ...grpc.CallOption) (*GetIndexStateResponse, error) {
	out := new(GetIndexStateResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/GetIndexState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetIndexBuildProgress(ctx context.Context, in *GetIndexBuildProgressRequest, opts ...grpc.CallOption) (*GetIndexBuildProgressResponse, error) {
	out := new(GetIndexBuildProgressResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/GetIndexBuildProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropIndex(ctx context.Context, in *DropIndexRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/DropIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*MutationResult, error) {
	out := new(MutationResult)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*MutationResult, error) {
	out := new(MutationResult)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResults, error) {
	out := new(SearchResults)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error) {
	out := new(FlushResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResults, error) {
	out := new(QueryResults)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CalcDistance(ctx context.Context, in *CalcDistanceRequest, opts ...grpc.CallOption) (*CalcDistanceResults, error) {
	out := new(CalcDistanceResults)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/CalcDistance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetFlushState(ctx context.Context, in *GetFlushStateRequest, opts ...grpc.CallOption) (*GetFlushStateResponse, error) {
	out := new(GetFlushStateResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/GetFlushState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetPersistentSegmentInfo(ctx context.Context, in *GetPersistentSegmentInfoRequest, opts ...grpc.CallOption) (*GetPersistentSegmentInfoResponse, error) {
	out := new(GetPersistentSegmentInfoResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/GetPersistentSegmentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetQuerySegmentInfo(ctx context.Context, in *GetQuerySegmentInfoRequest, opts ...grpc.CallOption) (*GetQuerySegmentInfoResponse, error) {
	out := new(GetQuerySegmentInfoResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/GetQuerySegmentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetReplicas(ctx context.Context, in *GetReplicasRequest, opts ...grpc.CallOption) (*GetReplicasResponse, error) {
	out := new(GetReplicasResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/GetReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Dummy(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/Dummy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) RegisterLink(ctx context.Context, in *RegisterLinkRequest, opts ...grpc.CallOption) (*RegisterLinkResponse, error) {
	out := new(RegisterLinkResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/RegisterLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) LoadBalance(ctx context.Context, in *LoadBalanceRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/LoadBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetCompactionState(ctx context.Context, in *GetCompactionStateRequest, opts ...grpc.CallOption) (*GetCompactionStateResponse, error) {
	out := new(GetCompactionStateResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/GetCompactionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ManualCompaction(ctx context.Context, in *ManualCompactionRequest, opts ...grpc.CallOption) (*ManualCompactionResponse, error) {
	out := new(ManualCompactionResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/ManualCompaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetCompactionStateWithPlans(ctx context.Context, in *GetCompactionPlansRequest, opts ...grpc.CallOption) (*GetCompactionPlansResponse, error) {
	out := new(GetCompactionPlansResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/GetCompactionStateWithPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetImportState(ctx context.Context, in *GetImportStateRequest, opts ...grpc.CallOption) (*GetImportStateResponse, error) {
	out := new(GetImportStateResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/GetImportState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ListImportTasks(ctx context.Context, in *ListImportTasksRequest, opts ...grpc.CallOption) (*ListImportTasksResponse, error) {
	out := new(ListImportTasksResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/ListImportTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/CreateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) UpdateCredential(ctx context.Context, in *UpdateCredentialRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/UpdateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/DeleteCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ListCredUsers(ctx context.Context, in *ListCredUsersRequest, opts ...grpc.CallOption) (*ListCredUsersResponse, error) {
	out := new(ListCredUsersResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/ListCredUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropRole(ctx context.Context, in *DropRoleRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/DropRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) OperateUserRole(ctx context.Context, in *OperateUserRoleRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/OperateUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SelectRole(ctx context.Context, in *SelectRoleRequest, opts ...grpc.CallOption) (*SelectRoleResponse, error) {
	out := new(SelectRoleResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/SelectRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SelectUser(ctx context.Context, in *SelectUserRequest, opts ...grpc.CallOption) (*SelectUserResponse, error) {
	out := new(SelectUserResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/SelectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SelectResource(ctx context.Context, in *SelectResourceRequest, opts ...grpc.CallOption) (*SelectResourceResponse, error) {
	out := new(SelectResourceResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/SelectResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) OperatePrivilege(ctx context.Context, in *OperatePrivilegeRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/OperatePrivilege", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SelectGrant(ctx context.Context, in *SelectGrantRequest, opts ...grpc.CallOption) (*SelectGrantResponse, error) {
	out := new(SelectGrantResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.MilvusService/SelectGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MilvusServiceServer is the server API for MilvusService service.
// All implementations must embed UnimplementedMilvusServiceServer
// for forward compatibility
type MilvusServiceServer interface {
	CreateCollection(context.Context, *CreateCollectionRequest) (*common.Status, error)
	DropCollection(context.Context, *DropCollectionRequest) (*common.Status, error)
	HasCollection(context.Context, *HasCollectionRequest) (*BoolResponse, error)
	LoadCollection(context.Context, *LoadCollectionRequest) (*common.Status, error)
	ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*common.Status, error)
	DescribeCollection(context.Context, *DescribeCollectionRequest) (*DescribeCollectionResponse, error)
	GetCollectionStatistics(context.Context, *GetCollectionStatisticsRequest) (*GetCollectionStatisticsResponse, error)
	ShowCollections(context.Context, *ShowCollectionsRequest) (*ShowCollectionsResponse, error)
	CreatePartition(context.Context, *CreatePartitionRequest) (*common.Status, error)
	DropPartition(context.Context, *DropPartitionRequest) (*common.Status, error)
	HasPartition(context.Context, *HasPartitionRequest) (*BoolResponse, error)
	LoadPartitions(context.Context, *LoadPartitionsRequest) (*common.Status, error)
	ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*common.Status, error)
	GetPartitionStatistics(context.Context, *GetPartitionStatisticsRequest) (*GetPartitionStatisticsResponse, error)
	ShowPartitions(context.Context, *ShowPartitionsRequest) (*ShowPartitionsResponse, error)
	CreateAlias(context.Context, *CreateAliasRequest) (*common.Status, error)
	DropAlias(context.Context, *DropAliasRequest) (*common.Status, error)
	AlterAlias(context.Context, *AlterAliasRequest) (*common.Status, error)
	CreateIndex(context.Context, *CreateIndexRequest) (*common.Status, error)
	DescribeIndex(context.Context, *DescribeIndexRequest) (*DescribeIndexResponse, error)
	GetIndexState(context.Context, *GetIndexStateRequest) (*GetIndexStateResponse, error)
	GetIndexBuildProgress(context.Context, *GetIndexBuildProgressRequest) (*GetIndexBuildProgressResponse, error)
	DropIndex(context.Context, *DropIndexRequest) (*common.Status, error)
	Insert(context.Context, *InsertRequest) (*MutationResult, error)
	Delete(context.Context, *DeleteRequest) (*MutationResult, error)
	Search(context.Context, *SearchRequest) (*SearchResults, error)
	Flush(context.Context, *FlushRequest) (*FlushResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResults, error)
	CalcDistance(context.Context, *CalcDistanceRequest) (*CalcDistanceResults, error)
	GetFlushState(context.Context, *GetFlushStateRequest) (*GetFlushStateResponse, error)
	GetPersistentSegmentInfo(context.Context, *GetPersistentSegmentInfoRequest) (*GetPersistentSegmentInfoResponse, error)
	GetQuerySegmentInfo(context.Context, *GetQuerySegmentInfoRequest) (*GetQuerySegmentInfoResponse, error)
	GetReplicas(context.Context, *GetReplicasRequest) (*GetReplicasResponse, error)
	Dummy(context.Context, *DummyRequest) (*DummyResponse, error)
	// TODO: remove
	RegisterLink(context.Context, *RegisterLinkRequest) (*RegisterLinkResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	LoadBalance(context.Context, *LoadBalanceRequest) (*common.Status, error)
	GetCompactionState(context.Context, *GetCompactionStateRequest) (*GetCompactionStateResponse, error)
	ManualCompaction(context.Context, *ManualCompactionRequest) (*ManualCompactionResponse, error)
	GetCompactionStateWithPlans(context.Context, *GetCompactionPlansRequest) (*GetCompactionPlansResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
	Import(context.Context, *ImportRequest) (*ImportResponse, error)
	GetImportState(context.Context, *GetImportStateRequest) (*GetImportStateResponse, error)
	ListImportTasks(context.Context, *ListImportTasksRequest) (*ListImportTasksResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
	CreateCredential(context.Context, *CreateCredentialRequest) (*common.Status, error)
	UpdateCredential(context.Context, *UpdateCredentialRequest) (*common.Status, error)
	DeleteCredential(context.Context, *DeleteCredentialRequest) (*common.Status, error)
	ListCredUsers(context.Context, *ListCredUsersRequest) (*ListCredUsersResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
	CreateRole(context.Context, *CreateRoleRequest) (*common.Status, error)
	DropRole(context.Context, *DropRoleRequest) (*common.Status, error)
	OperateUserRole(context.Context, *OperateUserRoleRequest) (*common.Status, error)
	SelectRole(context.Context, *SelectRoleRequest) (*SelectRoleResponse, error)
	SelectUser(context.Context, *SelectUserRequest) (*SelectUserResponse, error)
	SelectResource(context.Context, *SelectResourceRequest) (*SelectResourceResponse, error)
	OperatePrivilege(context.Context, *OperatePrivilegeRequest) (*common.Status, error)
	SelectGrant(context.Context, *SelectGrantRequest) (*SelectGrantResponse, error)
	mustEmbedUnimplementedMilvusServiceServer()
}

// UnimplementedMilvusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMilvusServiceServer struct {
}

func (UnimplementedMilvusServiceServer) CreateCollection(context.Context, *CreateCollectionRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedMilvusServiceServer) DropCollection(context.Context, *DropCollectionRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (UnimplementedMilvusServiceServer) HasCollection(context.Context, *HasCollectionRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCollection not implemented")
}
func (UnimplementedMilvusServiceServer) LoadCollection(context.Context, *LoadCollectionRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCollection not implemented")
}
func (UnimplementedMilvusServiceServer) ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (UnimplementedMilvusServiceServer) DescribeCollection(context.Context, *DescribeCollectionRequest) (*DescribeCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollection not implemented")
}
func (UnimplementedMilvusServiceServer) GetCollectionStatistics(context.Context, *GetCollectionStatisticsRequest) (*GetCollectionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionStatistics not implemented")
}
func (UnimplementedMilvusServiceServer) ShowCollections(context.Context, *ShowCollectionsRequest) (*ShowCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollections not implemented")
}
func (UnimplementedMilvusServiceServer) CreatePartition(context.Context, *CreatePartitionRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartition not implemented")
}
func (UnimplementedMilvusServiceServer) DropPartition(context.Context, *DropPartitionRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPartition not implemented")
}
func (UnimplementedMilvusServiceServer) HasPartition(context.Context, *HasPartitionRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPartition not implemented")
}
func (UnimplementedMilvusServiceServer) LoadPartitions(context.Context, *LoadPartitionsRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPartitions not implemented")
}
func (UnimplementedMilvusServiceServer) ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePartitions not implemented")
}
func (UnimplementedMilvusServiceServer) GetPartitionStatistics(context.Context, *GetPartitionStatisticsRequest) (*GetPartitionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionStatistics not implemented")
}
func (UnimplementedMilvusServiceServer) ShowPartitions(context.Context, *ShowPartitionsRequest) (*ShowPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (UnimplementedMilvusServiceServer) CreateAlias(context.Context, *CreateAliasRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlias not implemented")
}
func (UnimplementedMilvusServiceServer) DropAlias(context.Context, *DropAliasRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropAlias not implemented")
}
func (UnimplementedMilvusServiceServer) AlterAlias(context.Context, *AlterAliasRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterAlias not implemented")
}
func (UnimplementedMilvusServiceServer) CreateIndex(context.Context, *CreateIndexRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedMilvusServiceServer) DescribeIndex(context.Context, *DescribeIndexRequest) (*DescribeIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIndex not implemented")
}
func (UnimplementedMilvusServiceServer) GetIndexState(context.Context, *GetIndexStateRequest) (*GetIndexStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexState not implemented")
}
func (UnimplementedMilvusServiceServer) GetIndexBuildProgress(context.Context, *GetIndexBuildProgressRequest) (*GetIndexBuildProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexBuildProgress not implemented")
}
func (UnimplementedMilvusServiceServer) DropIndex(context.Context, *DropIndexRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (UnimplementedMilvusServiceServer) Insert(context.Context, *InsertRequest) (*MutationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedMilvusServiceServer) Delete(context.Context, *DeleteRequest) (*MutationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMilvusServiceServer) Search(context.Context, *SearchRequest) (*SearchResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedMilvusServiceServer) Flush(context.Context, *FlushRequest) (*FlushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedMilvusServiceServer) Query(context.Context, *QueryRequest) (*QueryResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedMilvusServiceServer) CalcDistance(context.Context, *CalcDistanceRequest) (*CalcDistanceResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcDistance not implemented")
}
func (UnimplementedMilvusServiceServer) GetFlushState(context.Context, *GetFlushStateRequest) (*GetFlushStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlushState not implemented")
}
func (UnimplementedMilvusServiceServer) GetPersistentSegmentInfo(context.Context, *GetPersistentSegmentInfoRequest) (*GetPersistentSegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersistentSegmentInfo not implemented")
}
func (UnimplementedMilvusServiceServer) GetQuerySegmentInfo(context.Context, *GetQuerySegmentInfoRequest) (*GetQuerySegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuerySegmentInfo not implemented")
}
func (UnimplementedMilvusServiceServer) GetReplicas(context.Context, *GetReplicasRequest) (*GetReplicasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicas not implemented")
}
func (UnimplementedMilvusServiceServer) Dummy(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dummy not implemented")
}
func (UnimplementedMilvusServiceServer) RegisterLink(context.Context, *RegisterLinkRequest) (*RegisterLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLink not implemented")
}
func (UnimplementedMilvusServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedMilvusServiceServer) LoadBalance(context.Context, *LoadBalanceRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadBalance not implemented")
}
func (UnimplementedMilvusServiceServer) GetCompactionState(context.Context, *GetCompactionStateRequest) (*GetCompactionStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompactionState not implemented")
}
func (UnimplementedMilvusServiceServer) ManualCompaction(context.Context, *ManualCompactionRequest) (*ManualCompactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualCompaction not implemented")
}
func (UnimplementedMilvusServiceServer) GetCompactionStateWithPlans(context.Context, *GetCompactionPlansRequest) (*GetCompactionPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompactionStateWithPlans not implemented")
}
func (UnimplementedMilvusServiceServer) Import(context.Context, *ImportRequest) (*ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedMilvusServiceServer) GetImportState(context.Context, *GetImportStateRequest) (*GetImportStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportState not implemented")
}
func (UnimplementedMilvusServiceServer) ListImportTasks(context.Context, *ListImportTasksRequest) (*ListImportTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImportTasks not implemented")
}
func (UnimplementedMilvusServiceServer) CreateCredential(context.Context, *CreateCredentialRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedMilvusServiceServer) UpdateCredential(context.Context, *UpdateCredentialRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedMilvusServiceServer) DeleteCredential(context.Context, *DeleteCredentialRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedMilvusServiceServer) ListCredUsers(context.Context, *ListCredUsersRequest) (*ListCredUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredUsers not implemented")
}
func (UnimplementedMilvusServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedMilvusServiceServer) DropRole(context.Context, *DropRoleRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropRole not implemented")
}
func (UnimplementedMilvusServiceServer) OperateUserRole(context.Context, *OperateUserRoleRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateUserRole not implemented")
}
func (UnimplementedMilvusServiceServer) SelectRole(context.Context, *SelectRoleRequest) (*SelectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectRole not implemented")
}
func (UnimplementedMilvusServiceServer) SelectUser(context.Context, *SelectUserRequest) (*SelectUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectUser not implemented")
}
func (UnimplementedMilvusServiceServer) SelectResource(context.Context, *SelectResourceRequest) (*SelectResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectResource not implemented")
}
func (UnimplementedMilvusServiceServer) OperatePrivilege(context.Context, *OperatePrivilegeRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatePrivilege not implemented")
}
func (UnimplementedMilvusServiceServer) SelectGrant(context.Context, *SelectGrantRequest) (*SelectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectGrant not implemented")
}
func (UnimplementedMilvusServiceServer) mustEmbedUnimplementedMilvusServiceServer() {}

// UnsafeMilvusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MilvusServiceServer will
// result in compilation errors.
type UnsafeMilvusServiceServer interface {
	mustEmbedUnimplementedMilvusServiceServer()
}

func RegisterMilvusServiceServer(s grpc.ServiceRegistrar, srv MilvusServiceServer) {
	s.RegisterService(&MilvusService_ServiceDesc, srv)
}

func _MilvusService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/DropCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropCollection(ctx, req.(*DropCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/HasCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasCollection(ctx, req.(*HasCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_LoadCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).LoadCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/LoadCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).LoadCollection(ctx, req.(*LoadCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/ReleaseCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ReleaseCollection(ctx, req.(*ReleaseCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/DescribeCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeCollection(ctx, req.(*DescribeCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetCollectionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetCollectionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/GetCollectionStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetCollectionStatistics(ctx, req.(*GetCollectionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/ShowCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowCollections(ctx, req.(*ShowCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/CreatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreatePartition(ctx, req.(*CreatePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/DropPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropPartition(ctx, req.(*DropPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/HasPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasPartition(ctx, req.(*HasPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_LoadPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).LoadPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/LoadPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).LoadPartitions(ctx, req.(*LoadPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ReleasePartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ReleasePartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/ReleasePartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ReleasePartitions(ctx, req.(*ReleasePartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetPartitionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetPartitionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/GetPartitionStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetPartitionStatistics(ctx, req.(*GetPartitionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/ShowPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, req.(*ShowPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/CreateAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateAlias(ctx, req.(*CreateAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/DropAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropAlias(ctx, req.(*DropAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_AlterAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).AlterAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/AlterAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).AlterAlias(ctx, req.(*AlterAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateIndex(ctx, req.(*CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/DescribeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, req.(*DescribeIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetIndexState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetIndexState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/GetIndexState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetIndexState(ctx, req.(*GetIndexStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetIndexBuildProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexBuildProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetIndexBuildProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/GetIndexBuildProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetIndexBuildProgress(ctx, req.(*GetIndexBuildProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/DropIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropIndex(ctx, req.(*DropIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Flush(ctx, req.(*FlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CalcDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcDistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CalcDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/CalcDistance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CalcDistance(ctx, req.(*CalcDistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetFlushState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlushStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetFlushState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/GetFlushState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetFlushState(ctx, req.(*GetFlushStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetPersistentSegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersistentSegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetPersistentSegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/GetPersistentSegmentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetPersistentSegmentInfo(ctx, req.(*GetPersistentSegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetQuerySegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuerySegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetQuerySegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/GetQuerySegmentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetQuerySegmentInfo(ctx, req.(*GetQuerySegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplicasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/GetReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetReplicas(ctx, req.(*GetReplicasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Dummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Dummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/Dummy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Dummy(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_RegisterLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).RegisterLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/RegisterLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).RegisterLink(ctx, req.(*RegisterLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_LoadBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).LoadBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/LoadBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).LoadBalance(ctx, req.(*LoadBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetCompactionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompactionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetCompactionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/GetCompactionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetCompactionState(ctx, req.(*GetCompactionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ManualCompaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualCompactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ManualCompaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/ManualCompaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ManualCompaction(ctx, req.(*ManualCompactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetCompactionStateWithPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompactionPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetCompactionStateWithPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/GetCompactionStateWithPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetCompactionStateWithPlans(ctx, req.(*GetCompactionPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Import(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetImportState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImportStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetImportState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/GetImportState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetImportState(ctx, req.(*GetImportStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ListImportTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImportTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ListImportTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/ListImportTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ListImportTasks(ctx, req.(*ListImportTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/CreateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateCredential(ctx, req.(*CreateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/UpdateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).UpdateCredential(ctx, req.(*UpdateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/DeleteCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DeleteCredential(ctx, req.(*DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ListCredUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ListCredUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/ListCredUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ListCredUsers(ctx, req.(*ListCredUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/DropRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropRole(ctx, req.(*DropRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_OperateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).OperateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/OperateUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).OperateUserRole(ctx, req.(*OperateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SelectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SelectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/SelectRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SelectRole(ctx, req.(*SelectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SelectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SelectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/SelectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SelectUser(ctx, req.(*SelectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SelectResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SelectResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/SelectResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SelectResource(ctx, req.(*SelectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_OperatePrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatePrivilegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).OperatePrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/OperatePrivilege",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).OperatePrivilege(ctx, req.(*OperatePrivilegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SelectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SelectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.MilvusService/SelectGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SelectGrant(ctx, req.(*SelectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MilvusService_ServiceDesc is the grpc.ServiceDesc for MilvusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MilvusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.milvus.MilvusService",
	HandlerType: (*MilvusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _MilvusService_CreateCollection_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _MilvusService_DropCollection_Handler,
		},
		{
			MethodName: "HasCollection",
			Handler:    _MilvusService_HasCollection_Handler,
		},
		{
			MethodName: "LoadCollection",
			Handler:    _MilvusService_LoadCollection_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _MilvusService_ReleaseCollection_Handler,
		},
		{
			MethodName: "DescribeCollection",
			Handler:    _MilvusService_DescribeCollection_Handler,
		},
		{
			MethodName: "GetCollectionStatistics",
			Handler:    _MilvusService_GetCollectionStatistics_Handler,
		},
		{
			MethodName: "ShowCollections",
			Handler:    _MilvusService_ShowCollections_Handler,
		},
		{
			MethodName: "CreatePartition",
			Handler:    _MilvusService_CreatePartition_Handler,
		},
		{
			MethodName: "DropPartition",
			Handler:    _MilvusService_DropPartition_Handler,
		},
		{
			MethodName: "HasPartition",
			Handler:    _MilvusService_HasPartition_Handler,
		},
		{
			MethodName: "LoadPartitions",
			Handler:    _MilvusService_LoadPartitions_Handler,
		},
		{
			MethodName: "ReleasePartitions",
			Handler:    _MilvusService_ReleasePartitions_Handler,
		},
		{
			MethodName: "GetPartitionStatistics",
			Handler:    _MilvusService_GetPartitionStatistics_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _MilvusService_ShowPartitions_Handler,
		},
		{
			MethodName: "CreateAlias",
			Handler:    _MilvusService_CreateAlias_Handler,
		},
		{
			MethodName: "DropAlias",
			Handler:    _MilvusService_DropAlias_Handler,
		},
		{
			MethodName: "AlterAlias",
			Handler:    _MilvusService_AlterAlias_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _MilvusService_CreateIndex_Handler,
		},
		{
			MethodName: "DescribeIndex",
			Handler:    _MilvusService_DescribeIndex_Handler,
		},
		{
			MethodName: "GetIndexState",
			Handler:    _MilvusService_GetIndexState_Handler,
		},
		{
			MethodName: "GetIndexBuildProgress",
			Handler:    _MilvusService_GetIndexBuildProgress_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _MilvusService_DropIndex_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _MilvusService_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MilvusService_Delete_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _MilvusService_Search_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _MilvusService_Flush_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _MilvusService_Query_Handler,
		},
		{
			MethodName: "CalcDistance",
			Handler:    _MilvusService_CalcDistance_Handler,
		},
		{
			MethodName: "GetFlushState",
			Handler:    _MilvusService_GetFlushState_Handler,
		},
		{
			MethodName: "GetPersistentSegmentInfo",
			Handler:    _MilvusService_GetPersistentSegmentInfo_Handler,
		},
		{
			MethodName: "GetQuerySegmentInfo",
			Handler:    _MilvusService_GetQuerySegmentInfo_Handler,
		},
		{
			MethodName: "GetReplicas",
			Handler:    _MilvusService_GetReplicas_Handler,
		},
		{
			MethodName: "Dummy",
			Handler:    _MilvusService_Dummy_Handler,
		},
		{
			MethodName: "RegisterLink",
			Handler:    _MilvusService_RegisterLink_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _MilvusService_GetMetrics_Handler,
		},
		{
			MethodName: "LoadBalance",
			Handler:    _MilvusService_LoadBalance_Handler,
		},
		{
			MethodName: "GetCompactionState",
			Handler:    _MilvusService_GetCompactionState_Handler,
		},
		{
			MethodName: "ManualCompaction",
			Handler:    _MilvusService_ManualCompaction_Handler,
		},
		{
			MethodName: "GetCompactionStateWithPlans",
			Handler:    _MilvusService_GetCompactionStateWithPlans_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _MilvusService_Import_Handler,
		},
		{
			MethodName: "GetImportState",
			Handler:    _MilvusService_GetImportState_Handler,
		},
		{
			MethodName: "ListImportTasks",
			Handler:    _MilvusService_ListImportTasks_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _MilvusService_CreateCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _MilvusService_UpdateCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _MilvusService_DeleteCredential_Handler,
		},
		{
			MethodName: "ListCredUsers",
			Handler:    _MilvusService_ListCredUsers_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _MilvusService_CreateRole_Handler,
		},
		{
			MethodName: "DropRole",
			Handler:    _MilvusService_DropRole_Handler,
		},
		{
			MethodName: "OperateUserRole",
			Handler:    _MilvusService_OperateUserRole_Handler,
		},
		{
			MethodName: "SelectRole",
			Handler:    _MilvusService_SelectRole_Handler,
		},
		{
			MethodName: "SelectUser",
			Handler:    _MilvusService_SelectUser_Handler,
		},
		{
			MethodName: "SelectResource",
			Handler:    _MilvusService_SelectResource_Handler,
		},
		{
			MethodName: "OperatePrivilege",
			Handler:    _MilvusService_OperatePrivilege_Handler,
		},
		{
			MethodName: "SelectGrant",
			Handler:    _MilvusService_SelectGrant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milvus.proto",
}

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyServiceClient interface {
	RegisterLink(ctx context.Context, in *RegisterLinkRequest, opts ...grpc.CallOption) (*RegisterLinkResponse, error)
}

type proxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyServiceClient(cc grpc.ClientConnInterface) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) RegisterLink(ctx context.Context, in *RegisterLinkRequest, opts ...grpc.CallOption) (*RegisterLinkResponse, error) {
	out := new(RegisterLinkResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.milvus.ProxyService/RegisterLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServiceServer is the server API for ProxyService service.
// All implementations must embed UnimplementedProxyServiceServer
// for forward compatibility
type ProxyServiceServer interface {
	RegisterLink(context.Context, *RegisterLinkRequest) (*RegisterLinkResponse, error)
	mustEmbedUnimplementedProxyServiceServer()
}

// UnimplementedProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServiceServer struct {
}

func (UnimplementedProxyServiceServer) RegisterLink(context.Context, *RegisterLinkRequest) (*RegisterLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLink not implemented")
}
func (UnimplementedProxyServiceServer) mustEmbedUnimplementedProxyServiceServer() {}

// UnsafeProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServiceServer will
// result in compilation errors.
type UnsafeProxyServiceServer interface {
	mustEmbedUnimplementedProxyServiceServer()
}

func RegisterProxyServiceServer(s grpc.ServiceRegistrar, srv ProxyServiceServer) {
	s.RegisterService(&ProxyService_ServiceDesc, srv)
}

func _ProxyService_RegisterLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).RegisterLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.milvus.ProxyService/RegisterLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).RegisterLink(ctx, req.(*RegisterLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyService_ServiceDesc is the grpc.ServiceDesc for ProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.milvus.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterLink",
			Handler:    _ProxyService_RegisterLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milvus.proto",
}
